Iteration:
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode prehead = new ListNode(-1);
        ListNode prev = prehead;
        //check if any of the lists is empty
        while (list1 !=null && list2 !=null){
            if ( list1.val<= list2.val) {
                prev.next = list1;
                list1 = list1.next;
            }else{
                prev.next = list2;
                list2 = list 2.next;
            }
            prev = prev.next;
        }
        prev.next = list1 == null ? list2:list1;
        return prehead.next;
    }
}

TC: O(n+m)
SC: O(n+m)
Recursion:
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode head;
        
        if (list1.val < l2.val){
            head = list1;
            list1 = list1.next;
        } else {
            head = list2;
            list2 = list 2.next;
        }
        head.next = mergreTwoLists (l1,l2);
        
        return head;
    }
}

TC: O(n+m)
SC: O(1)
