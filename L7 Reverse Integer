Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

// using the symbol /= to remove the last digit of input x, however, when the case cannot accept the case of 1534236469 ????

class Solution {
   public int reverse(int x) {
       int reverse = 0;
       while (x!=0){
           int digit  = x % 10;
           reverse = reverse * 10 + digit;


           x /= 10;
       }
       return reverse;
   }
}




Solution: the number 9646324351 exceed the range of 32-bit range, we need to check out the reversed integer exceeds this range -2^31 (-2147483648) to 2^31-1 (2147483647) 

class Solution {
   public int reverse(int x) {
   	long reverse = 0; // use long instead of int
   	while (x!=0){
       	int digit  = x % 10;
       	reverse = reverse * 10 + digit;

       	// check if reverse overflows the int range
       	if (reverse > Integer.MAX_VALUE || reverse < Integer.MIN_VALUE) {
           	return 0; // return 0 if overflow occurs
       	}
       	x /= 10;
   	}
   	return (int) reverse; // cast long to int
   }
}
